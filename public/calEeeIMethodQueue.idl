/* ***** BEGIN LICENSE BLOCK *****
 * 3e Calendar
 * Copyright Â© 2011  Zonio s.r.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

#include "calIOperation.idl"

interface nsIURI;

/**
 * Queue holding methods to be called on EEE server and their responses.
 *
 * @todo other fault related data
 */
[scriptable, uuid(070c60dd-1b8a-44ea-ab9c-ebec966e6b4e)]
interface calEeeIMethodQueue: calIOperation {

    /**
     * EEE server URI for XML-RPC.
     *
     * @throws NS_ERROR_IN_PROGRESS if called after method calls have already
     * been executed
     */
    attribute nsIURI serverUri;

    /**
     * Last repsonse from method call (success or fault) returned by
     * the EEE server.
     *
     * @throws NS_ERROR_NOT_AVAILABLE if called before the first server
     * response to method calls has been returned fro the server
     * @todo nsIVariant
     */
    readonly attribute nsIVariant lastResponse;

    /**
     * Current method queue error description.
     *
     * This is a complement to method queue's status.
     */
    readonly attribute ACString errorDescription;

    /**
     * Indicator whether last response was a fault or not.
     *
     * @throws NS_ERROR_NOT_AVAILABLE if called before the first server
     * response to method calls has been returned fro the server
     */
    readonly attribute boolean isFault;

    /**
     * Puts a method to the end of this queue with its parameters.
     *
     * @param methodName fully specified EEE method name
     * @param count number of arguments passed to the method
     * @param parameters method parameters themselves
     * @return receiver
     * @throws NS_ERROR_IN_PROGRESS if called after method calls have already
     * been executed
     */
    calEeeIMethodQueue enqueueMethod(
        in ACString methodName,
        in PRUint32 count,
        [array, size_is(count)] in nsISupports parameters
    );

    /**
     * Executes queue of queued methods on EEE server.
     *
     * @param listener gets notified when methods execution finishes
     * @param resultContext context passed to the listener
     * @return receiver
     * @throws NS_ERROR_IN_PROGRESS if called after method calls have already
     * been executed
     * @throws NS_ERROR_NOT_INITIALIZED if called with no server URI set
     */
    calEeeIMethodQueue execute(in calIGenericOperationListener listener,
                               in nsISupports resultContext);

};
